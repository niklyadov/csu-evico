// <auto-generated />
using System;
using Evico.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Evico.Api.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221113141439_PreAdult")]
    partial class PreAdult
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EventCategoryRecordEventRecord", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventsId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("EventCategoryRecordEventRecord");
                });

            modelBuilder.Entity("EventRecordProfileRecord", b =>
                {
                    b.Property<long>("OrganizerEventsId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizersId")
                        .HasColumnType("bigint");

                    b.HasKey("OrganizerEventsId", "OrganizersId");

                    b.HasIndex("OrganizersId");

                    b.ToTable("EventRecordProfileRecord");
                });

            modelBuilder.Entity("EventRecordProfileRecord1", b =>
                {
                    b.Property<long>("ParticipantEventsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParticipantsId")
                        .HasColumnType("bigint");

                    b.HasKey("ParticipantEventsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("EventRecordProfileRecord1");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventCategoryRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EventCategoryRecord");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventReviewRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("Rate")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.ToTable("EventReviewRecord");
                });

            modelBuilder.Entity("Evico.Api.Entities.PhotoRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("EventReviewRecordId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MinioBucket")
                        .HasColumnType("int");

                    b.Property<Guid>("MinioInternalId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PhotoType")
                        .HasColumnType("int");

                    b.Property<long?>("PlaceReviewRecordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventReviewRecordId");

                    b.HasIndex("MinioInternalId")
                        .IsUnique();

                    b.HasIndex("PlaceReviewRecordId");

                    b.ToTable("Photo", (string)null);

                    b.HasDiscriminator<int>("PhotoType").HasValue(0);
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceCategoryRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PlaceCategoryRecord");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("LocationLatitude")
                        .HasColumnType("double");

                    b.Property<double>("LocationLongitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceReviewRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Rate")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PlaceId");

                    b.ToTable("PlaceReviewRecord");
                });

            modelBuilder.Entity("Evico.Api.Entities.ProfileRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("PhotoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint unsigned");

                    b.Property<long?>("VkUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PhotoId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("PlaceCategoryRecordPlaceRecord", b =>
                {
                    b.Property<long>("CategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlacesId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("PlaceCategoryRecordPlaceRecord");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventPhotoRecord", b =>
                {
                    b.HasBaseType("Evico.Api.Entities.PhotoRecord");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.HasIndex("EventId");

                    b.HasDiscriminator().HasValue(20);
                });

            modelBuilder.Entity("Evico.Api.Entities.EventReviewPhotoRecord", b =>
                {
                    b.HasBaseType("Evico.Api.Entities.PhotoRecord");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint");

                    b.HasIndex("ReviewId");

                    b.HasDiscriminator().HasValue(50);
                });

            modelBuilder.Entity("Evico.Api.Entities.PlacePhotoRecord", b =>
                {
                    b.HasBaseType("Evico.Api.Entities.PhotoRecord");

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.HasIndex("PlaceId");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceReviewPhotoRecord", b =>
                {
                    b.HasBaseType("Evico.Api.Entities.PhotoRecord");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("PlaceReviewPhotoRecord_ReviewId");

                    b.HasIndex("ReviewId");

                    b.HasDiscriminator().HasValue(40);
                });

            modelBuilder.Entity("Evico.Api.Entities.ProfilePhotoRecord", b =>
                {
                    b.HasBaseType("Evico.Api.Entities.PhotoRecord");

                    b.HasDiscriminator().HasValue(30);
                });

            modelBuilder.Entity("EventCategoryRecordEventRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.EventCategoryRecord", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.EventRecord", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRecordProfileRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.EventRecord", null)
                        .WithMany()
                        .HasForeignKey("OrganizerEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.ProfileRecord", null)
                        .WithMany()
                        .HasForeignKey("OrganizersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventRecordProfileRecord1", b =>
                {
                    b.HasOne("Evico.Api.Entities.EventRecord", null)
                        .WithMany()
                        .HasForeignKey("ParticipantEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.ProfileRecord", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evico.Api.Entities.EventRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.ProfileRecord", "Owner")
                        .WithMany("OwnEvents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.PlaceRecord", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventReviewRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.ProfileRecord", "Author")
                        .WithMany("OwnEventReviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.EventRecord", "Event")
                        .WithMany("Reviews")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Evico.Api.Entities.PhotoRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.ProfileRecord", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Evico.Api.Entities.EventReviewRecord", null)
                        .WithMany("Photos")
                        .HasForeignKey("EventReviewRecordId");

                    b.HasOne("Evico.Api.Entities.PlaceReviewRecord", null)
                        .WithMany("Photos")
                        .HasForeignKey("PlaceReviewRecordId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.ProfileRecord", "Owner")
                        .WithMany("OwnPlaces")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.PlaceRecord", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Owner");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceReviewRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.ProfileRecord", "Author")
                        .WithMany("OwnPlaceReviews")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.PlaceRecord", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Evico.Api.Entities.ProfileRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.ProfilePhotoRecord", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PlaceCategoryRecordPlaceRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.PlaceCategoryRecord", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evico.Api.Entities.PlaceRecord", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evico.Api.Entities.EventPhotoRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.EventRecord", "Event")
                        .WithMany("Photos")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventReviewPhotoRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.EventReviewRecord", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlacePhotoRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.PlaceRecord", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceReviewPhotoRecord", b =>
                {
                    b.HasOne("Evico.Api.Entities.PlaceReviewRecord", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventRecord", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Evico.Api.Entities.EventReviewRecord", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceRecord", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Evico.Api.Entities.PlaceReviewRecord", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Evico.Api.Entities.ProfileRecord", b =>
                {
                    b.Navigation("OwnEventReviews");

                    b.Navigation("OwnEvents");

                    b.Navigation("OwnPlaceReviews");

                    b.Navigation("OwnPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
